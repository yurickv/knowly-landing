// ============================================
// app/api/contact/route.ts
// ============================================
import { NextRequest, NextResponse } from 'next/server';

interface ContactFormData {
  name: string;
  company: string;
  contact: string;
  painPoint: string;
}

export async function POST(request: NextRequest) {
  try {
    const body: ContactFormData = await request.json();

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è
    if (!body.name || !body.company || !body.contact) {
      return NextResponse.json(
        { error: "–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è" },
        { status: 400 }
      );
    }

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è email –∞–±–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    const phoneRegex = /^\+?[\d\s\-()]+$/;

    if (!emailRegex.test(body.contact) && !phoneRegex.test(body.contact)) {
      return NextResponse.json(
        { error: '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç email –∞–±–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É' },
        { status: 400 }
      );
    }

    // –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —Ä—ñ–∑–Ω—ñ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó:

    // 1. –í—ñ–¥–ø—Ä–∞–≤–∫–∞ email —á–µ—Ä–µ–∑ SendGrid
    // await sendEmail(body);

    // 2. –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
    // await saveToDatabase(body);

    // 3. –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤ CRM (HubSpot, Salesforce)
    // await sendToCRM(body);

    // 4. –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤ Telegram
    // await sendToTelegram(body);

    // 5. –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤ Google Sheets
    await sendToGoogleSheets(body);

    // –î–ª—è –¥–µ–º–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥—É—î–º–æ
    // console.log('–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞:', body);

    return NextResponse.json(
      {
        success: true,
        message: "–î—è–∫—É—î–º–æ! –ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.",
      },
      { status: 200 }
    );
  } catch (error) {
    console.error('Error processing contact form:', error);
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}

// ============================================
// –ü—Ä–∏–∫–ª–∞–¥ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ SendGrid
// ============================================
// npm install @sendgrid/mail

/*
import sgMail from '@sendgrid/mail';

sgMail.setApiKey(process.env.SENDGRID_API_KEY!);

async function sendEmail(data: ContactFormData) {
  const msg = {
    to: process.env.CONTACT_EMAIL!,
    from: process.env.FROM_EMAIL!,
    subject: `–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –≤—ñ–¥ ${data.name} (${data.company})`,
    html: `
      <h2>–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –∑ –ª–µ–Ω–¥—ñ–Ω–≥—É</h2>
      <p><strong>–Ü–º'—è:</strong> ${data.name}</p>
      <p><strong>–ö–æ–º–ø–∞–Ω—ñ—è:</strong> ${data.company}</p>
      <p><strong>–ö–æ–Ω—Ç–∞–∫—Ç:</strong> ${data.contact}</p>
      <p><strong>–ì–æ–ª–æ–≤–Ω–∏–π –±—ñ–ª—å:</strong></p>
      <p>${data.painPoint || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}</p>
    `,
  };

  await sgMail.send(msg);
}
*/

// ============================================
// –ü—Ä–∏–∫–ª–∞–¥ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ Telegram Bot
// ============================================
/*
async function sendToTelegram(data: ContactFormData) {
  const botToken = process.env.TELEGRAM_BOT_TOKEN!;
  const chatId = process.env.TELEGRAM_CHAT_ID!;
  
  const message = `
üîî –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –∑ –ª–µ–Ω–¥—ñ–Ω–≥—É!

üë§ –Ü–º'—è: ${data.name}
üè¢ –ö–æ–º–ø–∞–Ω—ñ—è: ${data.company}
üìû –ö–æ–Ω—Ç–∞–∫—Ç: ${data.contact}
üí¨ –ì–æ–ª–æ–≤–Ω–∏–π –±—ñ–ª—å: ${data.painPoint || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
  `.trim();

  const url = `https://api.telegram.org/bot${botToken}/sendMessage`;
  
  await fetch(url, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      chat_id: chatId,
      text: message,
      parse_mode: 'HTML',
    }),
  });
}
*/

// ============================================
// –ü—Ä–∏–∫–ª–∞–¥ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ Google Sheets
// ============================================
// npm install googleapis

import { google } from 'googleapis';

async function sendToGoogleSheets(data: ContactFormData) {
  const auth = new google.auth.GoogleAuth({
    credentials: JSON.parse(process.env.GOOGLE_SERVICE_ACCOUNT_KEY!),
    scopes: ['https://www.googleapis.com/auth/spreadsheets'],
  });

  const sheets = google.sheets({ version: 'v4', auth });
  const spreadsheetId = process.env.GOOGLE_SHEET_ID!;

  // üïì –§–æ—Ä–º–∞—Ç—É—î–º–æ –¥–∞—Ç—É —É –≤–∏–≥–ª—è–¥—ñ "dd.MM.yyyy HH:mm"
  const now = new Date();
  const formattedDate = now
    .toLocaleString('uk-UA', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    })
    .replace(',', '');

  await sheets.spreadsheets.values.append({
    spreadsheetId,
    range: '–ó–∞—è–≤–∫–∏!A:E',
    valueInputOption: 'USER_ENTERED',
    requestBody: {
      values: [
        [
          formattedDate,
          data.name,
          data.company,
          data.contact,
          data.painPoint || '',
        ],
      ],
    },
  });
}

// ============================================
// –ü—Ä–∏–∫–ª–∞–¥ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö (Prisma)
// ============================================
/*
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function saveToDatabase(data: ContactFormData) {
  await prisma.contactRequest.create({
    data: {
      name: data.name,
      company: data.company,
      contact: data.contact,
      painPoint: data.painPoint,
      createdAt: new Date(),
    },
  });
}
*/
